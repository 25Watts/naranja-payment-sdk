<?php
/**
 * PaymentRequest200
 *
 * PHP version 5
 *
 * @category Class
 * @package  Naranja\CheckoutApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ranty-sls
 *
 * Digital payments Tarjeta Naranja
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: you@your-company.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Naranja\CheckoutApi\Model;

use \ArrayAccess;
use \Naranja\CheckoutApi\ObjectSerializer;

/**
 * PaymentRequest200 Class Doc Comment
 *
 * @category Class
 * @package  Naranja\CheckoutApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaymentRequest200 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'payment_request_200';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'payment_type' => 'string',
        'status' => 'string',
        'expiration_date' => 'string',
        'transactions' => '\Naranja\CheckoutApi\Model\PaymentRequestTransaction[]',
        'external_payment_id' => 'string',
        'id' => 'string',
        'callback_url' => 'string',
        'authorization_mode' => 'string',
        'equest_creation_redirect' => '\Naranja\CheckoutApi\Model\RequestCreationRedirect',
        'creation_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'payment_type' => null,
        'status' => null,
        'expiration_date' => null,
        'transactions' => null,
        'external_payment_id' => null,
        'id' => null,
        'callback_url' => null,
        'authorization_mode' => null,
        'equest_creation_redirect' => null,
        'creation_date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payment_type' => 'payment_type',
        'status' => 'status',
        'expiration_date' => 'expiration_date',
        'transactions' => 'transactions',
        'external_payment_id' => 'external_payment_id',
        'id' => 'id',
        'callback_url' => 'callback_url',
        'authorization_mode' => 'authorization_mode',
        'equest_creation_redirect' => 'equest_creation_redirect',
        'creation_date' => 'creation_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payment_type' => 'setPaymentType',
        'status' => 'setStatus',
        'expiration_date' => 'setExpirationDate',
        'transactions' => 'setTransactions',
        'external_payment_id' => 'setExternalPaymentId',
        'id' => 'setId',
        'callback_url' => 'setCallbackUrl',
        'authorization_mode' => 'setAuthorizationMode',
        'equest_creation_redirect' => 'setEquestCreationRedirect',
        'creation_date' => 'setCreationDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payment_type' => 'getPaymentType',
        'status' => 'getStatus',
        'expiration_date' => 'getExpirationDate',
        'transactions' => 'getTransactions',
        'external_payment_id' => 'getExternalPaymentId',
        'id' => 'getId',
        'callback_url' => 'getCallbackUrl',
        'authorization_mode' => 'getAuthorizationMode',
        'equest_creation_redirect' => 'getEquestCreationRedirect',
        'creation_date' => 'getCreationDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['payment_type'] = isset($data['payment_type']) ? $data['payment_type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['transactions'] = isset($data['transactions']) ? $data['transactions'] : null;
        $this->container['external_payment_id'] = isset($data['external_payment_id']) ? $data['external_payment_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['callback_url'] = isset($data['callback_url']) ? $data['callback_url'] : null;
        $this->container['authorization_mode'] = isset($data['authorization_mode']) ? $data['authorization_mode'] : null;
        $this->container['equest_creation_redirect'] = isset($data['equest_creation_redirect']) ? $data['equest_creation_redirect'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payment_type
     *
     * @return string|null
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param string|null $payment_type payment_type
     *
     * @return $this
     */
    public function setPaymentType($payment_type)
    {
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return string|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param string|null $expiration_date expiration_date
     *
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return \Naranja\CheckoutApi\Model\PaymentRequestTransaction[]|null
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param \Naranja\CheckoutApi\Model\PaymentRequestTransaction[]|null $transactions transactions
     *
     * @return $this
     */
    public function setTransactions($transactions)
    {
        $this->container['transactions'] = $transactions;

        return $this;
    }

    /**
     * Gets external_payment_id
     *
     * @return string|null
     */
    public function getExternalPaymentId()
    {
        return $this->container['external_payment_id'];
    }

    /**
     * Sets external_payment_id
     *
     * @param string|null $external_payment_id external_payment_id
     *
     * @return $this
     */
    public function setExternalPaymentId($external_payment_id)
    {
        $this->container['external_payment_id'] = $external_payment_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets callback_url
     *
     * @return string|null
     */
    public function getCallbackUrl()
    {
        return $this->container['callback_url'];
    }

    /**
     * Sets callback_url
     *
     * @param string|null $callback_url callback_url
     *
     * @return $this
     */
    public function setCallbackUrl($callback_url)
    {
        $this->container['callback_url'] = $callback_url;

        return $this;
    }

    /**
     * Gets authorization_mode
     *
     * @return string|null
     */
    public function getAuthorizationMode()
    {
        return $this->container['authorization_mode'];
    }

    /**
     * Sets authorization_mode
     *
     * @param string|null $authorization_mode authorization_mode
     *
     * @return $this
     */
    public function setAuthorizationMode($authorization_mode)
    {
        $this->container['authorization_mode'] = $authorization_mode;

        return $this;
    }

    /**
     * Gets equest_creation_redirect
     *
     * @return \Naranja\CheckoutApi\Model\RequestCreationRedirect|null
     */
    public function getEquestCreationRedirect()
    {
        return $this->container['equest_creation_redirect'];
    }

    /**
     * Sets equest_creation_redirect
     *
     * @param \Naranja\CheckoutApi\Model\RequestCreationRedirect|null $equest_creation_redirect equest_creation_redirect
     *
     * @return $this
     */
    public function setEquestCreationRedirect($equest_creation_redirect)
    {
        $this->container['equest_creation_redirect'] = $equest_creation_redirect;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return string|null
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param string|null $creation_date creation_date
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


