<?php
/**
 * Accountconditions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Naranja\Security
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * naranja-security-api-prodblue
 *
 * This is Naranja API to manage Security
 *
 * The version of the OpenAPI document: 3.1.2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Naranja\Security\Model;

use \ArrayAccess;
use \Naranja\Security\ObjectSerializer;

/**
 * Accountconditions Class Doc Comment
 *
 * @category Class
 * @package  Naranja\Security
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Accountconditions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'accountconditions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'listin_status' => 'string',
        'listin_date' => '\DateTime',
        'ocr_activation_status' => 'string',
        'confidenciality_check' => 'bool',
        'open_status' => 'float',
        'open_status_risk' => 'string',
        'open_status_short_description' => 'string',
        'open_date' => '\DateTime',
        'capital_plan' => 'float',
        'capital_issue' => 'float',
        'statement_issue' => 'float',
        'statement_status' => '\Naranja\Security\Model\Accountpack',
        'lawyer_code' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'listin_status' => null,
        'listin_date' => 'date',
        'ocr_activation_status' => null,
        'confidenciality_check' => null,
        'open_status' => null,
        'open_status_risk' => null,
        'open_status_short_description' => null,
        'open_date' => 'date',
        'capital_plan' => null,
        'capital_issue' => null,
        'statement_issue' => null,
        'statement_status' => null,
        'lawyer_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'listin_status' => 'listin_status',
        'listin_date' => 'listin_date',
        'ocr_activation_status' => 'ocr_activation_status',
        'confidenciality_check' => 'confidenciality_check',
        'open_status' => 'open_status',
        'open_status_risk' => 'open_status_risk',
        'open_status_short_description' => 'open_status_short_description',
        'open_date' => 'open_date',
        'capital_plan' => 'capital_plan',
        'capital_issue' => 'capital_issue',
        'statement_issue' => 'statement_issue',
        'statement_status' => 'statement_status',
        'lawyer_code' => 'lawyer_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'listin_status' => 'setListinStatus',
        'listin_date' => 'setListinDate',
        'ocr_activation_status' => 'setOcrActivationStatus',
        'confidenciality_check' => 'setConfidencialityCheck',
        'open_status' => 'setOpenStatus',
        'open_status_risk' => 'setOpenStatusRisk',
        'open_status_short_description' => 'setOpenStatusShortDescription',
        'open_date' => 'setOpenDate',
        'capital_plan' => 'setCapitalPlan',
        'capital_issue' => 'setCapitalIssue',
        'statement_issue' => 'setStatementIssue',
        'statement_status' => 'setStatementStatus',
        'lawyer_code' => 'setLawyerCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'listin_status' => 'getListinStatus',
        'listin_date' => 'getListinDate',
        'ocr_activation_status' => 'getOcrActivationStatus',
        'confidenciality_check' => 'getConfidencialityCheck',
        'open_status' => 'getOpenStatus',
        'open_status_risk' => 'getOpenStatusRisk',
        'open_status_short_description' => 'getOpenStatusShortDescription',
        'open_date' => 'getOpenDate',
        'capital_plan' => 'getCapitalPlan',
        'capital_issue' => 'getCapitalIssue',
        'statement_issue' => 'getStatementIssue',
        'statement_status' => 'getStatementStatus',
        'lawyer_code' => 'getLawyerCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['listin_status'] = isset($data['listin_status']) ? $data['listin_status'] : null;
        $this->container['listin_date'] = isset($data['listin_date']) ? $data['listin_date'] : null;
        $this->container['ocr_activation_status'] = isset($data['ocr_activation_status']) ? $data['ocr_activation_status'] : null;
        $this->container['confidenciality_check'] = isset($data['confidenciality_check']) ? $data['confidenciality_check'] : null;
        $this->container['open_status'] = isset($data['open_status']) ? $data['open_status'] : null;
        $this->container['open_status_risk'] = isset($data['open_status_risk']) ? $data['open_status_risk'] : null;
        $this->container['open_status_short_description'] = isset($data['open_status_short_description']) ? $data['open_status_short_description'] : null;
        $this->container['open_date'] = isset($data['open_date']) ? $data['open_date'] : null;
        $this->container['capital_plan'] = isset($data['capital_plan']) ? $data['capital_plan'] : null;
        $this->container['capital_issue'] = isset($data['capital_issue']) ? $data['capital_issue'] : null;
        $this->container['statement_issue'] = isset($data['statement_issue']) ? $data['statement_issue'] : null;
        $this->container['statement_status'] = isset($data['statement_status']) ? $data['statement_status'] : null;
        $this->container['lawyer_code'] = isset($data['lawyer_code']) ? $data['lawyer_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets listin_status
     *
     * @return string|null
     */
    public function getListinStatus()
    {
        return $this->container['listin_status'];
    }

    /**
     * Sets listin_status
     *
     * @param string|null $listin_status listin_status
     *
     * @return $this
     */
    public function setListinStatus($listin_status)
    {
        $this->container['listin_status'] = $listin_status;

        return $this;
    }

    /**
     * Gets listin_date
     *
     * @return \DateTime|null
     */
    public function getListinDate()
    {
        return $this->container['listin_date'];
    }

    /**
     * Sets listin_date
     *
     * @param \DateTime|null $listin_date listin_date
     *
     * @return $this
     */
    public function setListinDate($listin_date)
    {
        $this->container['listin_date'] = $listin_date;

        return $this;
    }

    /**
     * Gets ocr_activation_status
     *
     * @return string|null
     */
    public function getOcrActivationStatus()
    {
        return $this->container['ocr_activation_status'];
    }

    /**
     * Sets ocr_activation_status
     *
     * @param string|null $ocr_activation_status ocr_activation_status
     *
     * @return $this
     */
    public function setOcrActivationStatus($ocr_activation_status)
    {
        $this->container['ocr_activation_status'] = $ocr_activation_status;

        return $this;
    }

    /**
     * Gets confidenciality_check
     *
     * @return bool|null
     */
    public function getConfidencialityCheck()
    {
        return $this->container['confidenciality_check'];
    }

    /**
     * Sets confidenciality_check
     *
     * @param bool|null $confidenciality_check confidenciality_check
     *
     * @return $this
     */
    public function setConfidencialityCheck($confidenciality_check)
    {
        $this->container['confidenciality_check'] = $confidenciality_check;

        return $this;
    }

    /**
     * Gets open_status
     *
     * @return float|null
     */
    public function getOpenStatus()
    {
        return $this->container['open_status'];
    }

    /**
     * Sets open_status
     *
     * @param float|null $open_status open_status
     *
     * @return $this
     */
    public function setOpenStatus($open_status)
    {
        $this->container['open_status'] = $open_status;

        return $this;
    }

    /**
     * Gets open_status_risk
     *
     * @return string|null
     */
    public function getOpenStatusRisk()
    {
        return $this->container['open_status_risk'];
    }

    /**
     * Sets open_status_risk
     *
     * @param string|null $open_status_risk open_status_risk
     *
     * @return $this
     */
    public function setOpenStatusRisk($open_status_risk)
    {
        $this->container['open_status_risk'] = $open_status_risk;

        return $this;
    }

    /**
     * Gets open_status_short_description
     *
     * @return string|null
     */
    public function getOpenStatusShortDescription()
    {
        return $this->container['open_status_short_description'];
    }

    /**
     * Sets open_status_short_description
     *
     * @param string|null $open_status_short_description open_status_short_description
     *
     * @return $this
     */
    public function setOpenStatusShortDescription($open_status_short_description)
    {
        $this->container['open_status_short_description'] = $open_status_short_description;

        return $this;
    }

    /**
     * Gets open_date
     *
     * @return \DateTime|null
     */
    public function getOpenDate()
    {
        return $this->container['open_date'];
    }

    /**
     * Sets open_date
     *
     * @param \DateTime|null $open_date open_date
     *
     * @return $this
     */
    public function setOpenDate($open_date)
    {
        $this->container['open_date'] = $open_date;

        return $this;
    }

    /**
     * Gets capital_plan
     *
     * @return float|null
     */
    public function getCapitalPlan()
    {
        return $this->container['capital_plan'];
    }

    /**
     * Sets capital_plan
     *
     * @param float|null $capital_plan capital_plan
     *
     * @return $this
     */
    public function setCapitalPlan($capital_plan)
    {
        $this->container['capital_plan'] = $capital_plan;

        return $this;
    }

    /**
     * Gets capital_issue
     *
     * @return float|null
     */
    public function getCapitalIssue()
    {
        return $this->container['capital_issue'];
    }

    /**
     * Sets capital_issue
     *
     * @param float|null $capital_issue capital_issue
     *
     * @return $this
     */
    public function setCapitalIssue($capital_issue)
    {
        $this->container['capital_issue'] = $capital_issue;

        return $this;
    }

    /**
     * Gets statement_issue
     *
     * @return float|null
     */
    public function getStatementIssue()
    {
        return $this->container['statement_issue'];
    }

    /**
     * Sets statement_issue
     *
     * @param float|null $statement_issue statement_issue
     *
     * @return $this
     */
    public function setStatementIssue($statement_issue)
    {
        $this->container['statement_issue'] = $statement_issue;

        return $this;
    }

    /**
     * Gets statement_status
     *
     * @return \Naranja\Security\Model\Accountpack|null
     */
    public function getStatementStatus()
    {
        return $this->container['statement_status'];
    }

    /**
     * Sets statement_status
     *
     * @param \Naranja\Security\Model\Accountpack|null $statement_status statement_status
     *
     * @return $this
     */
    public function setStatementStatus($statement_status)
    {
        $this->container['statement_status'] = $statement_status;

        return $this;
    }

    /**
     * Gets lawyer_code
     *
     * @return float|null
     */
    public function getLawyerCode()
    {
        return $this->container['lawyer_code'];
    }

    /**
     * Sets lawyer_code
     *
     * @param float|null $lawyer_code lawyer_code
     *
     * @return $this
     */
    public function setLawyerCode($lawyer_code)
    {
        $this->container['lawyer_code'] = $lawyer_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


