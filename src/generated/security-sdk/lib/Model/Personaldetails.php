<?php
/**
 * Personaldetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Naranja\Security
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * naranja-security-api-prodblue
 *
 * This is Naranja API to manage Security
 *
 * The version of the OpenAPI document: 3.1.2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Naranja\Security\Model;

use \ArrayAccess;
use \Naranja\Security\ObjectSerializer;

/**
 * Personaldetails Class Doc Comment
 *
 * @category Class
 * @package  Naranja\Security
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Personaldetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'personaldetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'last_name' => 'string',
        'name' => 'string',
        'identity_document' => '\Naranja\Security\Model\Personaldetailsidentitydocument',
        'gender' => 'string',
        'birth_date' => 'string',
        'education_level' => '\Naranja\Security\Model\Accountpack',
        'marital_status' => '\Naranja\Security\Model\Accountpack',
        'fiscal_data' => '\Naranja\Security\Model\Personaldetailsfiscaldata'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'last_name' => null,
        'name' => null,
        'identity_document' => null,
        'gender' => null,
        'birth_date' => null,
        'education_level' => null,
        'marital_status' => null,
        'fiscal_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'last_name' => 'last_name',
        'name' => 'name',
        'identity_document' => 'identity_document',
        'gender' => 'gender',
        'birth_date' => 'birth_date',
        'education_level' => 'education_level',
        'marital_status' => 'marital_status',
        'fiscal_data' => 'fiscal_data'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'last_name' => 'setLastName',
        'name' => 'setName',
        'identity_document' => 'setIdentityDocument',
        'gender' => 'setGender',
        'birth_date' => 'setBirthDate',
        'education_level' => 'setEducationLevel',
        'marital_status' => 'setMaritalStatus',
        'fiscal_data' => 'setFiscalData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'last_name' => 'getLastName',
        'name' => 'getName',
        'identity_document' => 'getIdentityDocument',
        'gender' => 'getGender',
        'birth_date' => 'getBirthDate',
        'education_level' => 'getEducationLevel',
        'marital_status' => 'getMaritalStatus',
        'fiscal_data' => 'getFiscalData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['identity_document'] = isset($data['identity_document']) ? $data['identity_document'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['birth_date'] = isset($data['birth_date']) ? $data['birth_date'] : null;
        $this->container['education_level'] = isset($data['education_level']) ? $data['education_level'] : null;
        $this->container['marital_status'] = isset($data['marital_status']) ? $data['marital_status'] : null;
        $this->container['fiscal_data'] = isset($data['fiscal_data']) ? $data['fiscal_data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets identity_document
     *
     * @return \Naranja\Security\Model\Personaldetailsidentitydocument|null
     */
    public function getIdentityDocument()
    {
        return $this->container['identity_document'];
    }

    /**
     * Sets identity_document
     *
     * @param \Naranja\Security\Model\Personaldetailsidentitydocument|null $identity_document identity_document
     *
     * @return $this
     */
    public function setIdentityDocument($identity_document)
    {
        $this->container['identity_document'] = $identity_document;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender gender
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return string|null
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param string|null $birth_date birth_date
     *
     * @return $this
     */
    public function setBirthDate($birth_date)
    {
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets education_level
     *
     * @return \Naranja\Security\Model\Accountpack|null
     */
    public function getEducationLevel()
    {
        return $this->container['education_level'];
    }

    /**
     * Sets education_level
     *
     * @param \Naranja\Security\Model\Accountpack|null $education_level education_level
     *
     * @return $this
     */
    public function setEducationLevel($education_level)
    {
        $this->container['education_level'] = $education_level;

        return $this;
    }

    /**
     * Gets marital_status
     *
     * @return \Naranja\Security\Model\Accountpack|null
     */
    public function getMaritalStatus()
    {
        return $this->container['marital_status'];
    }

    /**
     * Sets marital_status
     *
     * @param \Naranja\Security\Model\Accountpack|null $marital_status marital_status
     *
     * @return $this
     */
    public function setMaritalStatus($marital_status)
    {
        $this->container['marital_status'] = $marital_status;

        return $this;
    }

    /**
     * Gets fiscal_data
     *
     * @return \Naranja\Security\Model\Personaldetailsfiscaldata|null
     */
    public function getFiscalData()
    {
        return $this->container['fiscal_data'];
    }

    /**
     * Sets fiscal_data
     *
     * @param \Naranja\Security\Model\Personaldetailsfiscaldata|null $fiscal_data fiscal_data
     *
     * @return $this
     */
    public function setFiscalData($fiscal_data)
    {
        $this->container['fiscal_data'] = $fiscal_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


