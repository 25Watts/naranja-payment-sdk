<?php
/**
 * Account
 *
 * PHP version 5
 *
 * @category Class
 * @package  Naranja\Security
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * naranja-security-api-prodblue
 *
 * This is Naranja API to manage Security
 *
 * The version of the OpenAPI document: 3.1.2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Naranja\Security\Model;

use \ArrayAccess;
use \Naranja\Security\ObjectSerializer;

/**
 * Account Class Doc Comment
 *
 * @category Class
 * @package  Naranja\Security
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Account implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'account';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'float',
        'open_date' => '\DateTime',
        'pack' => '\Naranja\Security\Model\Accountpack',
        'source_branch' => '\Naranja\Security\Model\Accountpack',
        'employee_id' => 'float',
        'affinity_branch_number' => 'float',
        'portfolio' => '\Naranja\Security\Model\Accountpack',
        'insurance_company' => '\Naranja\Security\Model\Accountpack',
        'card' => '\Naranja\Security\Model\Accountpack',
        'cancellation_reason' => '\Naranja\Security\Model\Accountpack',
        'has_limit' => 'bool',
        'category' => 'string',
        'company_code' => 'float',
        'conditions' => '\Naranja\Security\Model\Accountconditions',
        'limits' => '\Naranja\Security\Model\Accountlimits',
        'banks' => '\Naranja\Security\Model\Accountbanks[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'open_date' => 'date',
        'pack' => null,
        'source_branch' => null,
        'employee_id' => null,
        'affinity_branch_number' => null,
        'portfolio' => null,
        'insurance_company' => null,
        'card' => null,
        'cancellation_reason' => null,
        'has_limit' => null,
        'category' => null,
        'company_code' => null,
        'conditions' => null,
        'limits' => null,
        'banks' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'open_date' => 'open_date',
        'pack' => 'pack',
        'source_branch' => 'source_branch',
        'employee_id' => 'employee_id',
        'affinity_branch_number' => 'affinity_branch_number',
        'portfolio' => 'portfolio',
        'insurance_company' => 'insurance_company',
        'card' => 'card',
        'cancellation_reason' => 'cancellation_reason',
        'has_limit' => 'has_limit',
        'category' => 'category',
        'company_code' => 'company_code',
        'conditions' => 'conditions',
        'limits' => 'limits',
        'banks' => 'banks'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'open_date' => 'setOpenDate',
        'pack' => 'setPack',
        'source_branch' => 'setSourceBranch',
        'employee_id' => 'setEmployeeId',
        'affinity_branch_number' => 'setAffinityBranchNumber',
        'portfolio' => 'setPortfolio',
        'insurance_company' => 'setInsuranceCompany',
        'card' => 'setCard',
        'cancellation_reason' => 'setCancellationReason',
        'has_limit' => 'setHasLimit',
        'category' => 'setCategory',
        'company_code' => 'setCompanyCode',
        'conditions' => 'setConditions',
        'limits' => 'setLimits',
        'banks' => 'setBanks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'open_date' => 'getOpenDate',
        'pack' => 'getPack',
        'source_branch' => 'getSourceBranch',
        'employee_id' => 'getEmployeeId',
        'affinity_branch_number' => 'getAffinityBranchNumber',
        'portfolio' => 'getPortfolio',
        'insurance_company' => 'getInsuranceCompany',
        'card' => 'getCard',
        'cancellation_reason' => 'getCancellationReason',
        'has_limit' => 'getHasLimit',
        'category' => 'getCategory',
        'company_code' => 'getCompanyCode',
        'conditions' => 'getConditions',
        'limits' => 'getLimits',
        'banks' => 'getBanks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['open_date'] = isset($data['open_date']) ? $data['open_date'] : null;
        $this->container['pack'] = isset($data['pack']) ? $data['pack'] : null;
        $this->container['source_branch'] = isset($data['source_branch']) ? $data['source_branch'] : null;
        $this->container['employee_id'] = isset($data['employee_id']) ? $data['employee_id'] : null;
        $this->container['affinity_branch_number'] = isset($data['affinity_branch_number']) ? $data['affinity_branch_number'] : null;
        $this->container['portfolio'] = isset($data['portfolio']) ? $data['portfolio'] : null;
        $this->container['insurance_company'] = isset($data['insurance_company']) ? $data['insurance_company'] : null;
        $this->container['card'] = isset($data['card']) ? $data['card'] : null;
        $this->container['cancellation_reason'] = isset($data['cancellation_reason']) ? $data['cancellation_reason'] : null;
        $this->container['has_limit'] = isset($data['has_limit']) ? $data['has_limit'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['company_code'] = isset($data['company_code']) ? $data['company_code'] : null;
        $this->container['conditions'] = isset($data['conditions']) ? $data['conditions'] : null;
        $this->container['limits'] = isset($data['limits']) ? $data['limits'] : null;
        $this->container['banks'] = isset($data['banks']) ? $data['banks'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets open_date
     *
     * @return \DateTime|null
     */
    public function getOpenDate()
    {
        return $this->container['open_date'];
    }

    /**
     * Sets open_date
     *
     * @param \DateTime|null $open_date open_date
     *
     * @return $this
     */
    public function setOpenDate($open_date)
    {
        $this->container['open_date'] = $open_date;

        return $this;
    }

    /**
     * Gets pack
     *
     * @return \Naranja\Security\Model\Accountpack|null
     */
    public function getPack()
    {
        return $this->container['pack'];
    }

    /**
     * Sets pack
     *
     * @param \Naranja\Security\Model\Accountpack|null $pack pack
     *
     * @return $this
     */
    public function setPack($pack)
    {
        $this->container['pack'] = $pack;

        return $this;
    }

    /**
     * Gets source_branch
     *
     * @return \Naranja\Security\Model\Accountpack|null
     */
    public function getSourceBranch()
    {
        return $this->container['source_branch'];
    }

    /**
     * Sets source_branch
     *
     * @param \Naranja\Security\Model\Accountpack|null $source_branch source_branch
     *
     * @return $this
     */
    public function setSourceBranch($source_branch)
    {
        $this->container['source_branch'] = $source_branch;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return float|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param float|null $employee_id employee_id
     *
     * @return $this
     */
    public function setEmployeeId($employee_id)
    {
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets affinity_branch_number
     *
     * @return float|null
     */
    public function getAffinityBranchNumber()
    {
        return $this->container['affinity_branch_number'];
    }

    /**
     * Sets affinity_branch_number
     *
     * @param float|null $affinity_branch_number affinity_branch_number
     *
     * @return $this
     */
    public function setAffinityBranchNumber($affinity_branch_number)
    {
        $this->container['affinity_branch_number'] = $affinity_branch_number;

        return $this;
    }

    /**
     * Gets portfolio
     *
     * @return \Naranja\Security\Model\Accountpack|null
     */
    public function getPortfolio()
    {
        return $this->container['portfolio'];
    }

    /**
     * Sets portfolio
     *
     * @param \Naranja\Security\Model\Accountpack|null $portfolio portfolio
     *
     * @return $this
     */
    public function setPortfolio($portfolio)
    {
        $this->container['portfolio'] = $portfolio;

        return $this;
    }

    /**
     * Gets insurance_company
     *
     * @return \Naranja\Security\Model\Accountpack|null
     */
    public function getInsuranceCompany()
    {
        return $this->container['insurance_company'];
    }

    /**
     * Sets insurance_company
     *
     * @param \Naranja\Security\Model\Accountpack|null $insurance_company insurance_company
     *
     * @return $this
     */
    public function setInsuranceCompany($insurance_company)
    {
        $this->container['insurance_company'] = $insurance_company;

        return $this;
    }

    /**
     * Gets card
     *
     * @return \Naranja\Security\Model\Accountpack|null
     */
    public function getCard()
    {
        return $this->container['card'];
    }

    /**
     * Sets card
     *
     * @param \Naranja\Security\Model\Accountpack|null $card card
     *
     * @return $this
     */
    public function setCard($card)
    {
        $this->container['card'] = $card;

        return $this;
    }

    /**
     * Gets cancellation_reason
     *
     * @return \Naranja\Security\Model\Accountpack|null
     */
    public function getCancellationReason()
    {
        return $this->container['cancellation_reason'];
    }

    /**
     * Sets cancellation_reason
     *
     * @param \Naranja\Security\Model\Accountpack|null $cancellation_reason cancellation_reason
     *
     * @return $this
     */
    public function setCancellationReason($cancellation_reason)
    {
        $this->container['cancellation_reason'] = $cancellation_reason;

        return $this;
    }

    /**
     * Gets has_limit
     *
     * @return bool|null
     */
    public function getHasLimit()
    {
        return $this->container['has_limit'];
    }

    /**
     * Sets has_limit
     *
     * @param bool|null $has_limit has_limit
     *
     * @return $this
     */
    public function setHasLimit($has_limit)
    {
        $this->container['has_limit'] = $has_limit;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets company_code
     *
     * @return float|null
     */
    public function getCompanyCode()
    {
        return $this->container['company_code'];
    }

    /**
     * Sets company_code
     *
     * @param float|null $company_code company_code
     *
     * @return $this
     */
    public function setCompanyCode($company_code)
    {
        $this->container['company_code'] = $company_code;

        return $this;
    }

    /**
     * Gets conditions
     *
     * @return \Naranja\Security\Model\Accountconditions|null
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param \Naranja\Security\Model\Accountconditions|null $conditions conditions
     *
     * @return $this
     */
    public function setConditions($conditions)
    {
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Gets limits
     *
     * @return \Naranja\Security\Model\Accountlimits|null
     */
    public function getLimits()
    {
        return $this->container['limits'];
    }

    /**
     * Sets limits
     *
     * @param \Naranja\Security\Model\Accountlimits|null $limits limits
     *
     * @return $this
     */
    public function setLimits($limits)
    {
        $this->container['limits'] = $limits;

        return $this;
    }

    /**
     * Gets banks
     *
     * @return \Naranja\Security\Model\Accountbanks[]|null
     */
    public function getBanks()
    {
        return $this->container['banks'];
    }

    /**
     * Sets banks
     *
     * @param \Naranja\Security\Model\Accountbanks[]|null $banks banks
     *
     * @return $this
     */
    public function setBanks($banks)
    {
        $this->container['banks'] = $banks;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


