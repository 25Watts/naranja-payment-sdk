<?php
/**
 * Inlineresponse200
 *
 * PHP version 5
 *
 * @category Class
 * @package  Naranja\Security
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * naranja-security-api-prodblue
 *
 * This is Naranja API to manage Security
 *
 * The version of the OpenAPI document: 3.1.2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Naranja\Security\Model;

use \ArrayAccess;
use \Naranja\Security\ObjectSerializer;

/**
 * Inlineresponse200 Class Doc Comment
 *
 * @category Class
 * @package  Naranja\Security
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Inlineresponse200 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inlineresponse200';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'success' => 'bool',
        'nevada_affinity' => 'bool',
        'role' => 'string',
        'authorized_services' => '\Naranja\Security\Model\Inlineresponse200authorizedservices[]',
        'account' => '\Naranja\Security\Model\Account',
        'customer' => '\Naranja\Security\Model\Inlineresponse200customer',
        'law_firm' => '\Naranja\Security\Model\Lawfirm'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'success' => null,
        'nevada_affinity' => null,
        'role' => null,
        'authorized_services' => null,
        'account' => null,
        'customer' => null,
        'law_firm' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'success' => 'success',
        'nevada_affinity' => 'nevada_affinity',
        'role' => 'role',
        'authorized_services' => 'authorized_services',
        'account' => 'account',
        'customer' => 'customer',
        'law_firm' => 'law_firm'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'success' => 'setSuccess',
        'nevada_affinity' => 'setNevadaAffinity',
        'role' => 'setRole',
        'authorized_services' => 'setAuthorizedServices',
        'account' => 'setAccount',
        'customer' => 'setCustomer',
        'law_firm' => 'setLawFirm'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'success' => 'getSuccess',
        'nevada_affinity' => 'getNevadaAffinity',
        'role' => 'getRole',
        'authorized_services' => 'getAuthorizedServices',
        'account' => 'getAccount',
        'customer' => 'getCustomer',
        'law_firm' => 'getLawFirm'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['success'] = isset($data['success']) ? $data['success'] : null;
        $this->container['nevada_affinity'] = isset($data['nevada_affinity']) ? $data['nevada_affinity'] : null;
        $this->container['role'] = isset($data['role']) ? $data['role'] : null;
        $this->container['authorized_services'] = isset($data['authorized_services']) ? $data['authorized_services'] : null;
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['law_firm'] = isset($data['law_firm']) ? $data['law_firm'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets success
     *
     * @return bool|null
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param bool|null $success success
     *
     * @return $this
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets nevada_affinity
     *
     * @return bool|null
     */
    public function getNevadaAffinity()
    {
        return $this->container['nevada_affinity'];
    }

    /**
     * Sets nevada_affinity
     *
     * @param bool|null $nevada_affinity nevada_affinity
     *
     * @return $this
     */
    public function setNevadaAffinity($nevada_affinity)
    {
        $this->container['nevada_affinity'] = $nevada_affinity;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string|null $role role
     *
     * @return $this
     */
    public function setRole($role)
    {
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets authorized_services
     *
     * @return \Naranja\Security\Model\Inlineresponse200authorizedservices[]|null
     */
    public function getAuthorizedServices()
    {
        return $this->container['authorized_services'];
    }

    /**
     * Sets authorized_services
     *
     * @param \Naranja\Security\Model\Inlineresponse200authorizedservices[]|null $authorized_services authorized_services
     *
     * @return $this
     */
    public function setAuthorizedServices($authorized_services)
    {
        $this->container['authorized_services'] = $authorized_services;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \Naranja\Security\Model\Account|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \Naranja\Security\Model\Account|null $account account
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Naranja\Security\Model\Inlineresponse200customer|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Naranja\Security\Model\Inlineresponse200customer|null $customer customer
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets law_firm
     *
     * @return \Naranja\Security\Model\Lawfirm|null
     */
    public function getLawFirm()
    {
        return $this->container['law_firm'];
    }

    /**
     * Sets law_firm
     *
     * @param \Naranja\Security\Model\Lawfirm|null $law_firm law_firm
     *
     * @return $this
     */
    public function setLawFirm($law_firm)
    {
        $this->container['law_firm'] = $law_firm;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


