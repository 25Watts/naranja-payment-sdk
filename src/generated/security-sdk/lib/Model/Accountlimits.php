<?php
/**
 * Accountlimits
 *
 * PHP version 5
 *
 * @category Class
 * @package  Naranja\Security
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * naranja-security-api-prodblue
 *
 * This is Naranja API to manage Security
 *
 * The version of the OpenAPI document: 3.1.2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Naranja\Security\Model;

use \ArrayAccess;
use \Naranja\Security\ObjectSerializer;

/**
 * Accountlimits Class Doc Comment
 *
 * @category Class
 * @package  Naranja\Security
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Accountlimits implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'accountlimits';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'monthly' => 'float',
        'zeta' => 'float',
        'cpl' => 'float',
        'etp' => 'float',
        'cplom' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'monthly' => null,
        'zeta' => null,
        'cpl' => null,
        'etp' => null,
        'cplom' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'monthly' => 'monthly',
        'zeta' => 'zeta',
        'cpl' => 'cpl',
        'etp' => 'etp',
        'cplom' => 'cplom'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'monthly' => 'setMonthly',
        'zeta' => 'setZeta',
        'cpl' => 'setCpl',
        'etp' => 'setEtp',
        'cplom' => 'setCplom'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'monthly' => 'getMonthly',
        'zeta' => 'getZeta',
        'cpl' => 'getCpl',
        'etp' => 'getEtp',
        'cplom' => 'getCplom'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['monthly'] = isset($data['monthly']) ? $data['monthly'] : null;
        $this->container['zeta'] = isset($data['zeta']) ? $data['zeta'] : null;
        $this->container['cpl'] = isset($data['cpl']) ? $data['cpl'] : null;
        $this->container['etp'] = isset($data['etp']) ? $data['etp'] : null;
        $this->container['cplom'] = isset($data['cplom']) ? $data['cplom'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets monthly
     *
     * @return float|null
     */
    public function getMonthly()
    {
        return $this->container['monthly'];
    }

    /**
     * Sets monthly
     *
     * @param float|null $monthly monthly
     *
     * @return $this
     */
    public function setMonthly($monthly)
    {
        $this->container['monthly'] = $monthly;

        return $this;
    }

    /**
     * Gets zeta
     *
     * @return float|null
     */
    public function getZeta()
    {
        return $this->container['zeta'];
    }

    /**
     * Sets zeta
     *
     * @param float|null $zeta zeta
     *
     * @return $this
     */
    public function setZeta($zeta)
    {
        $this->container['zeta'] = $zeta;

        return $this;
    }

    /**
     * Gets cpl
     *
     * @return float|null
     */
    public function getCpl()
    {
        return $this->container['cpl'];
    }

    /**
     * Sets cpl
     *
     * @param float|null $cpl cpl
     *
     * @return $this
     */
    public function setCpl($cpl)
    {
        $this->container['cpl'] = $cpl;

        return $this;
    }

    /**
     * Gets etp
     *
     * @return float|null
     */
    public function getEtp()
    {
        return $this->container['etp'];
    }

    /**
     * Sets etp
     *
     * @param float|null $etp etp
     *
     * @return $this
     */
    public function setEtp($etp)
    {
        $this->container['etp'] = $etp;

        return $this;
    }

    /**
     * Gets cplom
     *
     * @return float|null
     */
    public function getCplom()
    {
        return $this->container['cplom'];
    }

    /**
     * Sets cplom
     *
     * @param float|null $cplom cplom
     *
     * @return $this
     */
    public function setCplom($cplom)
    {
        $this->container['cplom'] = $cplom;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


